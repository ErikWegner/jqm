'use strict';

var jqmControllers = angular.module('jqmControllers', [ 'jqmConstants', 'jqmServices', 'ui.bootstrap' ]);

jqmControllers.controller('µNodeListCtrl', function($scope, $http, $modal, µNodeDto, µProfileDto, selectedProfile)
{
    $scope.items = null;
    $scope.selected = [];
    $scope.profiles = µProfileDto.query();

    $scope.sortvar = 'jmxRegistryPort';

    $scope.save = function()
    {
        // Save and refresh the table - ID may have been generated by the server.
        µNodeDto.saveAll({}, $scope.items, $scope.refresh);
    };

    $scope.refresh = function()
    {
        $scope.selected.length = 0;
        $scope.items = µNodeDto.query();
    };

    // Only remove from list - save() will sync the list with the server so no need to delete it from server now
    $scope.remove = function()
    {
        var q = null;
        for ( var i = 0; i < $scope.selected.length; i++)
        {
            q = $scope.selected[i];
            $scope.items.splice($scope.items.indexOf(q), 1);
        }
        $scope.selected.length = 0;
    };

    $scope.filterOptions = {
        filterText : '',
    };

    $scope.gridOptions = {
        data : 'items',
        enableCellSelection : true,
        enableRowSelection : true,
        enableColumnResize : true,
        enableCellEditOnFocus : true,
        multiSelect : true,
        showSelectionCheckbox : true,
        selectWithCheckboxOnly : true,
        selectedItems : $scope.selected,
        showGroupPanel : false,
        filterOptions : $scope.filterOptions,
        plugins :  [new ngGridFlexibleHeightPlugin()],
        columnDefs : [
                {
                    field : 'name',
                    displayName : 'Name',
                    width : '**',
                    cellTemplate: '<div ng-class="{\'bg-success\': row.getProperty(\'reportsRunning\') === true, \'bg-danger\': row.getProperty(\'reportsRunning\') === false}"> \
                        <div class="ngCellText">{{row.getProperty(col.field)}}</div></div>'
                },
                {
                    field : 'dns',
                    displayName : 'DNS to bind to',
                    width : '**',
                },
                {
                    field : 'port',
                    displayName : 'HTTP port',
                    width : '*',
                },
                {
                    field : 'outputDirectory',
                    displayName : 'File produced storage',
                    width : '***',
                },
                {
                    field : 'jobRepoDirectory',
                    displayName : 'Directory containing jars',
                    width : '***',
                },
                {
                    field : 'tmpDirectory',
                    displayName : 'Temporary directory',
                    width : '**',
                },
                {
                    field : 'rootLogLevel',
                    displayName : 'Log level',
                },
                {
                    field : 'jmxRegistryPort',
                    displayName : 'jmxRegistryPort',
                },
                {
                    field : 'jmxServerPort',
                    displayName : 'jmxServerPort',
                },
                {
                    field : 'enabled',
                    displayName : 'Enabled',
                    cellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><span class="glyphicon {{ row.entity[col.field] ? \'glyphicon-ok\' : \'glyphicon-remove\' }}"></span></div>',
                    editableCellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><input type="checkbox" ng-input="COL_FIELD" ng-model="COL_FIELD"/></div>',
                    width : '*',
                },
                {
                    field : 'loapApiSimple',
                    displayName : 'Simple API',
                    cellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><span class="glyphicon {{ row.entity[col.field] ? \'glyphicon-ok\' : \'glyphicon-remove\' }}"></span></div>',
                    editableCellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><input type="checkbox" ng-input="COL_FIELD" ng-model="COL_FIELD"/></div>',
                    width : '*',
                },
                {
                    field : 'loadApiClient',
                    displayName : 'Client API',
                    cellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><span class="glyphicon {{ row.entity[col.field] ? \'glyphicon-ok\' : \'glyphicon-remove\' }}"></span></div>',
                    editableCellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><input type="checkbox" ng-input="COL_FIELD" ng-model="COL_FIELD"/></div>',
                    width : '*',
                },
                {
                    field : 'loadApiAdmin',
                    displayName : 'Admin API',
                    cellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><span class="glyphicon {{ row.entity[col.field] ? \'glyphicon-ok\' : \'glyphicon-remove\' }}"></span></div>',
                    editableCellTemplate : '<div class="ngSelectionCell" ng-class="col.colIndex()"><input type="checkbox" ng-input="COL_FIELD" ng-model="COL_FIELD"/></div>',
                    width : '*',
                }, 
                {
                    field : 'profileId',
                    displayName : 'Profile',
                    cellTemplate : '<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text>{{ (row.getProperty("profileId") | getByProperty:"id":profiles).name }}</span></div>',
                    editableCellTemplate : '<select ng-cell-input ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="q.id as q.name for q in profiles"></select>'
                },
                {
                    field : 'id',
                    enableCellEdit : false,
                    displayName : '',
                    cellTemplate : '<div class="ngCellText"><a ng-click="showlog(row.entity.name)">log</a></div>',
                    width :'*',
                }]
    };

    $scope.stop = function()
    {
        var q = null;
        for ( var i = 0; i < $scope.selected.length; i++)
        {
            q = $scope.selected[i];
            q.stop = true;
            q.$save();
        }
    };
    
    $scope.showlog = function(nodeName)
    {
        $modal.open({
            templateUrl : './template/file_reader.html',
            controller : 'fileReader',
            size : 'lg',

            resolve : {
                url : function()
                {
                    return "ws/admin/node/" + nodeName + "/log?latest=" + 200;
                }
            },
        });
    };

    $scope.$on('profile:updated', function(event,data) 
	{
    	$scope.refresh();
	});
    if (selectedProfile.id !== -1) { $scope.refresh(); }
});

jqmControllers.controller('µNodeDetailCtrl', [ '$scope', '$routeParams', 'µNodeDto', function($scope, $routeParams, µNodeDto)
{
    $scope.nodeId = $routeParams.nodeId;
    $scope.error = null;

    $scope.onError = function(errorResult)
    {
        console.debug(errorResult);
        $scope.error = errorResult.data;
    };

    $scope.node = µNodeDto.get({
        id : $routeParams.nodeId
    }, function()
    {
    }, $scope.onError);

} ]);
